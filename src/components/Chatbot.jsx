import React, { useState, useRef, useEffect } from 'react';
import { MessageCircle, X, Send, Bot, User } from 'lucide-react';
import './Chatbot.css';

const Chatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa nh√† h√†ng chay. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: messages.length + 1,
      text: inputMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate bot response
    setTimeout(() => {
      const botResponse = generateBotResponse(inputMessage);
      const botMessage = {
        id: messages.length + 2,
        text: botResponse,
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1000);
  };

  const generateBotResponse = (userInput) => {
    const input = userInput.toLowerCase();
    
    if (input.includes('menu') || input.includes('th·ª±c ƒë∆°n')) {
      return "Ch√∫ng t√¥i c√≥ nhi·ªÅu m√≥n chay ngon nh∆∞: Ph·ªü chay, Burger chay, C∆°m chay, v√† nhi·ªÅu m√≥n kh√°c. B·∫°n mu·ªën xem m√≥n n√†o c·ª• th·ªÉ kh√¥ng?";
    }
    
    if (input.includes('gi√°') || input.includes('price') || input.includes('bao nhi√™u')) {
      return "Gi√° c·∫£ c·ªßa ch√∫ng t√¥i r·∫•t h·ª£p l√Ω, t·ª´ 45,000ƒë - 150,000ƒë. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt gi√° trong menu ho·∫∑c t√¥i c√≥ th·ªÉ t∆∞ v·∫•n c·ª• th·ªÉ h∆°n.";
    }
    
    if (input.includes('giao h√†ng') || input.includes('delivery') || input.includes('ship')) {
      return "Ch√∫ng t√¥i giao h√†ng trong v√≤ng 30 ph√∫t v·ªõi ƒë∆°n t·ª´ 200,000ƒë tr·ªü l√™n. Ph√≠ ship ch·ªâ 15,000ƒë cho ƒë∆°n d∆∞·ªõi 200,000ƒë.";
    }
    
    if (input.includes('gi·ªù') || input.includes('m·ªü c·ª≠a') || input.includes('open')) {
      return "Nh√† h√†ng m·ªü c·ª≠a t·ª´ 6:00 s√°ng ƒë·∫øn 22:00 t·ªëi, 7 ng√†y trong tu·∫ßn. B·∫°n c√≥ th·ªÉ ƒë·∫∑t h√†ng online 24/7.";
    }
    
    if (input.includes('chay') || input.includes('vegetarian')) {
      return "T·∫•t c·∫£ m√≥n ƒÉn c·ªßa ch√∫ng t√¥i ƒë·ªÅu 100% thu·∫ßn chay, kh√¥ng s·ª≠ d·ª•ng th·ªãt, c√° hay c√°c s·∫£n ph·∫©m t·ª´ ƒë·ªông v·∫≠t. Nguy√™n li·ªáu organic t∆∞∆°i s·∫°ch.";
    }
    
    if (input.includes('c·∫£m ∆°n') || input.includes('thank')) {
      return "R·∫•t vui ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n! N·∫øu c·∫ßn th√™m th√¥ng tin g√¨, ƒë·ª´ng ng·∫°i h·ªèi nh√©! üòä";
    }
    
    return "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ menu, gi√° c·∫£, giao h√†ng, gi·ªù m·ªü c·ª≠a ho·∫∑c th√¥ng tin v·ªÅ m√≥n chay.";
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  return (
    <>
      {/* Chat Button */}
      <div className="chatbot-button" onClick={() => setIsOpen(true)}>
        <MessageCircle size={24} />
        <span className="chatbot-button-text">Chat v·ªõi ch√∫ng t√¥i</span>
      </div>

      {/* Chat Popup */}
      {isOpen && (
        <div className="chatbot-overlay" onClick={() => setIsOpen(false)}>
          <div className="chatbot-popup" onClick={(e) => e.stopPropagation()}>
            {/* Header */}
            <div className="chatbot-header">
              <div className="chatbot-header-info">
                <div className="chatbot-avatar">
                  <Bot size={20} />
                </div>
                <div>
                  <h4 className="chatbot-title">Tr·ª£ l√Ω ·∫£o</h4>
                  <p className="chatbot-subtitle">Nh√† h√†ng chay</p>
                </div>
              </div>
              <button className="chatbot-close" onClick={() => setIsOpen(false)}>
                <X size={20} />
              </button>
            </div>

            {/* Messages */}
            <div className="chatbot-messages">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
                >
                  <div className="message-avatar">
                    {message.sender === 'user' ? <User size={16} /> : <Bot size={16} />}
                  </div>
                  <div className="message-content">
                    <p className="message-text">{message.text}</p>
                    <span className="message-time">
                      {message.timestamp.toLocaleTimeString('vi-VN', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </span>
                  </div>
                </div>
              ))}
              
              {isTyping && (
                <div className="message bot-message">
                  <div className="message-avatar">
                    <Bot size={16} />
                  </div>
                  <div className="message-content">
                    <div className="typing-indicator">
                      <span></span>
                      <span></span>
                      <span></span>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="chatbot-input">
              <input
                type="text"
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                className="chatbot-input-field"
              />
              <button 
                className="chatbot-send-btn"
                onClick={handleSendMessage}
                disabled={!inputMessage.trim()}
              >
                <Send size={18} />
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default Chatbot; 